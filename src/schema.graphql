# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CommentDto {
  content: String!
  createdAt: DateTime!
  editedAt: DateTime
  id: ID!
  isEdited: Boolean
  postId: Float!
  userId: Float!
}

input CreateCommentInput {
  content: String!
  postId: Int!
}

input CreatePostInput {
  content: String!
  title: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FriendDto {
  createdAt: DateTime!
  friendUserId: Int!
  id: ID!
  status: String!
  updatedAt: DateTime
  userId: Int!
}

type LikeDto {
  createdAt: DateTime!
  emoji: String
  id: ID!
  postId: Int!
  updatedAt: DateTime
  userId: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  acceptFriendRequest(friendId: Int!): FriendDto!
  addFriend(targetId: Int!): FriendDto!
  createComment(createCommentInput: CreateCommentInput!): CommentDto!
  createLike(likeInput: UserLikesInput!): LikeDto!
  createPost(CreatePostInput: CreatePostInput!, file: Upload!): PostDto!
  deleteComment(id: Int!): Boolean!
  deleteLike(likeId: Int!): LikeDto!
  deleteLikeByUserAndPost(postId: Int!): LikeDto!
  deletePost(postId: Int!): Boolean!
  deleteUser: Boolean!
  getPostById(postId: Int!): PostDto!
  login(loginInput: LoginInput!): String!
  logout: String!
  markNotificationAsRead(id: Float!): NotificationDto!
  rejectFriendRequest(friendId: Int!): FriendDto!
  signup(signupInput: SignupInput!): String!
  updateComment(updateCommentInput: UpdateCommentInput!): CommentDto!
  updateLikeEmoji(likeInput: UserLikesInput!): LikeDto!
  updatePost(UpdatePostInput: CreatePostInput!, postId: Int!): PostDto!
  updateUserProfile(userProfileUpdates: UpdateUserInput!): UserDto!
  uploadUserProfile(image: Upload!): UserDto!
}

type NotificationDto {
  createdAt: DateTime!
  id: Int!
  isRead: Boolean!
  message: String!
  type: String!
  updatedAt: DateTime!
  userId: Int!
}

type PostDto {
  comments: [CommentDto!]
  content: String!
  file: String
  id: Int!
  likes: [LikeDto!]
  title: String!
  userId: Int!
  viewCount: Int
}

type Query {
  comment(id: Int!): CommentDto!
  comments(userId: Int!): [CommentDto!]!
  getLikeById(likeId: Int!): LikeDto!
  getLikesByPost(postId: Int!): [LikeDto!]!
  getLikesByUser: [LikeDto!]!
  getPostsByUser(userId: ID!): [PostDto!]!
  getProfile: UserDto!
  getUser(userId: Int!): UserDto!
  getUserFriends: [FriendDto!]!
  getUserNotifications(userId: Float!): [NotificationDto!]!
  getUsers: [UserDto!]!
  healthCheck: String!
}

input SignupInput {
  confirmPassword: String!
  email: String!
  name: String!
  password: String!
}

type Subscription {
  notifyUser: NotificationDto!
}

input UpdateCommentInput {
  commentId: Int
  content: String!
  postId: Int!
}

input UpdateUserInput {
  image: String
  name: String
  password: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserDto {
  comments: [CommentDto!]
  email: String!
  friends: [FriendDto!]
  id: ID!
  image: String
  likes: [LikeDto!]
  name: String!
  password: String!
  posts: [PostDto!]
}

input UserLikesInput {
  emoji: String
  postId: Int!
}